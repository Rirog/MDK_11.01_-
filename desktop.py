import tkinter as tk
from tkinter import ttk, messagebox
import requests
import json

API_BASE_URL = "http://localhost:8000"

class CarTradingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("AvtoLimonchik")
        self.root.geometry("1920x1080")
        self.root.configure(bg='#355c7d')
        self.root.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        self.center_window()
        
        self.auth_token = None
        self.current_user = None
        
        self.setup_styles()
        self.show_auth_frame()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry('{}x{}+{}+{}'.format(width, height, x, y))
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        self.colors = {
            'primary': '#6c5b7b',
            'secondary': '#355c7d',
            'success': '#355c7d',
            'danger': '#e86375',
            'warning': '#ffd022',
            'light': "#f5e1d9",
            'dark': '#355c7d',
            'background': '#355c7d',
            'accent': '#355c7d'
        }
        
        self.style.configure('TFrame', background=self.colors['background'])
        self.style.configure('TLabel', background=self.colors['background'], 
                           foreground=self.colors['light'], font=('Arial', 10))
        self.style.configure('TButton', font=('Arial', 10, 'bold'))
        self.style.configure('Header.TLabel', font=('Arial', 20, 'bold'), 
                           foreground=self.colors['light'])
        self.style.configure('Accent.TButton', background=self.colors['accent'],
                           foreground='white', focuscolor='none')
        self.style.configure('Secondary.TButton', background=self.colors['dark'],
                           foreground=self.colors['light'], focuscolor='none')
        self.style.configure('Success.TButton', background=self.colors['success'],
                           foreground='white', focuscolor='none')
        self.style.configure('Danger.TButton', background=self.colors['danger'],
                           foreground='white', focuscolor='none')
        
        self.style.map('Accent.TButton', 
                      background=[('active', '#6c5b7b'),
                                 ('pressed', '#355c7d')])
        self.style.map('Secondary.TButton',
                      background=[('active', '#6c5b7b'),
                                 ('pressed', '#355c7d')])
        self.style.map('Success.TButton',
                      background=[('active', '#6c5b7b'),
                                 ('pressed', '#355c7d')])
        self.style.map('Danger.TButton',
                      background=[('active', '#6c5b7b'),
                                 ('pressed', '#355c7d')])
    
    def clear_window(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞"""
        for widget in self.root.winfo_children():
            widget.destroy()
    
    def create_card_frame(self, parent):
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        card = tk.Frame(parent, bg=self.colors['light'], relief='raised', 
                       bd=1, padx=20, pady=20)
        return card
    
    def show_auth_frame(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä–µ–π–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.clear_window()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(expand=True)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(10, 20))
        
        # –ò–∫–æ–Ω–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∫–∞–∫ —ç–º–æ–¥–∑–∏
        car_icon = tk.Label(header_frame, text="üöó", font=('Arial', 40), 
                           bg=self.colors['background'], fg=self.colors['light'])
        car_icon.pack(pady=(0, 10))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = ttk.Label(header_frame, text="AvtoLimonchik", 
                               style='Header.TLabel')
        header_label.pack(pady=(0, 5))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        sub_label = ttk.Label(header_frame, text="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ttk.Separator(header_frame, orient='horizontal')
        separator.pack(fill=tk.X, pady=10)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        card = self.create_card_frame(main_frame)
        card.pack(expand=True, padx=20, pady=10)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        welcome_text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AvtoLimonchik!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n" 
            "‚Ä¢ –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É —Ñ–∏—Ä–º—ã\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
        )
        
        welcome_label = tk.Label(card, text=welcome_text, 
                               bg=self.colors['light'], fg=self.colors['dark'],
                               font=('Arial', 11), justify=tk.LEFT)
        welcome_label.pack(pady=20, anchor='w')
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(card, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        login_btn = ttk.Button(btn_frame, text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", 
                              style='Accent.TButton', 
                              command=self.show_login)
        login_btn.pack(fill=tk.X, pady=8, ipady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        register_btn = ttk.Button(btn_frame, text="–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", 
                                 style='Success.TButton', 
                                 command=self.show_register)
        register_btn.pack(fill=tk.X, pady=8, ipady=10)
        
        # –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
        footer_frame = ttk.Frame(main_frame)
        footer_frame.pack(fill=tk.X, pady=(18, 10))
        
        footer_label = ttk.Label(footer_frame, text="¬© 2025 AvtoLimonchik. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.", 
                               font=('Arial', 9), foreground='#95a5a6')
        footer_label.pack()
    
    def show_login(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        sub_label = ttk.Label(header_frame, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–æ—Ä–º–æ–π
        card = self.create_card_frame(main_frame)
        card.pack(expand=True, padx=20, pady=10)
        
        form_frame = tk.Frame(card, bg=self.colors['light'])
        form_frame.pack(expand=True, pady=10)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "login_email_phone"),
            ("–ü–∞—Ä–æ–ª—å", "login_password")
        ]
        
        self.login_entries = {}
        
        for i, (label, field_name) in enumerate(fields):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
            field_container = tk.Frame(form_frame, bg=self.colors['light'])
            field_container.pack(fill=tk.X, pady=12)
            
            # –ú–µ—Ç–∫–∞
            lbl = tk.Label(field_container, text=label, bg=self.colors['light'], 
                         fg=self.colors['dark'], font=('Arial', 10, 'bold'),
                         anchor='w')
            lbl.pack(fill=tk.X, pady=(0, 5))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry = ttk.Entry(field_container, font=('Arial', 11))
            if "password" in field_name:
                entry.config(show="‚Ä¢")
            entry.pack(fill=tk.X, pady=2, ipady=6)
            self.login_entries[field_name] = entry
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(card, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=(10, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        login_btn = ttk.Button(btn_frame, text="–í–æ–π—Ç–∏", 
                              style='Accent.TButton', 
                              command=self.perform_login)
        login_btn.pack(fill=tk.X, pady=6, ipady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = ttk.Button(btn_frame, text="–ù–∞–∑–∞–¥", 
                             style='Secondary.TButton', 
                             command=self.show_auth_frame)
        back_btn.pack(fill=tk.X, pady=6, ipady=6)
    
    def show_register(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        sub_label = ttk.Label(header_frame, text="–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–æ—Ä–º–æ–π
        card = self.create_card_frame(main_frame)
        card.pack(expand=True, padx=20, pady=10)
        
        form_container = tk.Frame(card, bg=self.colors['light'])
        form_container.pack(expand=True, pady=10)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞", "register_email"),
            ("–¢–µ–ª–µ—Ñ–æ–Ω", "register_phone"), 
            ("–ü–æ–ª–Ω–æ–µ –∏–º—è", "register_full_name"),
            ("–ü–∞—Ä–æ–ª—å", "register_password")
        ]

        self.register_entries = {}
        
        for i, (label, field_name) in enumerate(fields):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
            field_frame = tk.Frame(form_container, bg=self.colors['light'])
            field_frame.pack(fill=tk.X, pady=10)
            
            # –ú–µ—Ç–∫–∞
            lbl = tk.Label(field_frame, text=label, 
                         bg=self.colors['light'], fg=self.colors['dark'],
                         font=('Arial', 10, 'bold'), anchor='w')
            lbl.pack(fill=tk.X, pady=(0, 5))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry = ttk.Entry(field_frame, font=('Arial', 11))
            if "password" in field_name:
                entry.config(show="‚Ä¢")
            entry.pack(fill=tk.X, ipady=5)
            self.register_entries[field_name] = entry
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ttk.Separator(form_container, orient='horizontal')
        separator.pack(fill=tk.X, pady=20)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(form_container, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        register_btn = ttk.Button(btn_frame, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", 
                                 style='Success.TButton', 
                                 command=self.perform_register)
        register_btn.pack(fill=tk.X, pady=4, ipady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = ttk.Button(btn_frame, text="–ù–∞–∑–∞–¥", 
                             style='Secondary.TButton', 
                             command=self.show_auth_frame)
        back_btn.pack(fill=tk.X, pady=1, ipady=1)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_label = tk.Label(form_container, 
                             text="–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
                             bg=self.colors['light'], fg='#7f8c8d',
                             font=('Arial', 9))
        hint_label.pack(pady=10)
    
    def perform_login(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥"""
        email_phone = self.login_entries["login_email_phone"].get().strip()
        password = self.login_entries["login_password"].get()
        
        if not email_phone or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, email —ç—Ç–æ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        login_data = {"password": password}
        if "@" in email_phone:
            login_data["email"] = email_phone
        else:
            login_data["phone"] = email_phone
        
        try:
            response = requests.post(f"{API_BASE_URL}/users/auth/", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data["token"]
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.get_user_profile()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
    
    def perform_register(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
        data = {
            "email": self.register_entries["register_email"].get().strip(),
            "phone": self.register_entries["register_phone"].get().strip(),
            "full_name": self.register_entries["register_full_name"].get().strip(),
            "password": self.register_entries["register_password"].get()
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
        for field, value in data.items():
            if not value:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return
        
        try:
            response = requests.post(f"{API_BASE_URL}/users/register/", json=data)
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                for entry in self.register_entries.values():
                    entry.delete(0, tk.END)
                self.show_login()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def get_user_profile(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.auth_token:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return
        
        try:
            headers = {"token": self.auth_token}
            response = requests.get(f"{API_BASE_URL}/users/me/", headers=headers)
            
            if response.status_code == 200:
                self.current_user = response.json()
                self.show_main_menu()  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")


    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        sub_label = ttk.Label(header_frame, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AvtoLimonchik", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –º–µ–Ω—é
        card = self.create_card_frame(main_frame)
        card.pack(expand=True, padx=20, pady=10)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {self.current_user.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!"
        welcome_label = tk.Label(card, text=welcome_text,
                               bg=self.colors['light'], fg=self.colors['dark'],
                               font=('Arial', 14, 'bold'), anchor='w')
        welcome_label.pack(fill=tk.X, pady=(0, 20))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        menu_frame = tk.Frame(card, bg=self.colors['light'])
        menu_frame.pack(expand=True, pady=10)
        
        # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –≤ –±—É–¥—É—â–µ–º)
        menu_buttons = [
            ("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º", self.show_profile_management, 'Accent.TButton'),
            ("üöó –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏", self.show_available_cars, 'Success.TButton'),
            ("üìù –ú–æ–∏ –∞–Ω–∫–µ—Ç—ã", self.show_my_anketi, 'Secondary.TButton'),
            ("üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", self.show_my_purchases, 'Secondary.TButton'),
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –±–æ–ª—å—à–µ
        self.menu_buttons = {}
        for i, (text, command, style) in enumerate(menu_buttons):
            btn_frame = tk.Frame(menu_frame, bg=self.colors['light'])
            btn_frame.pack(fill=tk.X, pady=8)
            
            btn = ttk.Button(btn_frame, text=text, style=style, command=command, width=30)
            btn.pack(ipady=12, anchor='center')  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            self.menu_buttons[text] = btn
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ttk.Separator(card, orient='horizontal')
        separator.pack(fill=tk.X, pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ - —Ç–∞–∫–∂–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –±–æ–ª—å—à–µ
        logout_frame = tk.Frame(card, bg=self.colors['light'])
        logout_frame.pack(fill=tk.X, pady=10)
        
        logout_btn = ttk.Button(logout_frame, text="üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", 
                              style='Danger.TButton', 
                              command=self.confirm_logout,
                              width=30)
        logout_btn.pack(ipady=12, anchor='center')
        
        # –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
        footer_frame = ttk.Frame(main_frame)
        footer_frame.pack(fill=tk.X, pady=(18, 10))
        
        footer_label = ttk.Label(footer_frame, text="¬© 2025 AvtoLimonchik. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.", 
                               font=('Arial', 9), foreground='#95a5a6')
        footer_label.pack()

    def show_profile_management(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
        self.show_main_menu_old_style()

    def show_main_menu_old_style(self):
        """–°—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–ø—Ä–æ—Ñ–∏–ª—å)"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –±–æ–ª—å—à–µ
        back_frame = tk.Frame(header_frame, bg=self.colors['background'])
        back_frame.pack(fill=tk.X, pady=(0, 10))
        
        back_btn = ttk.Button(back_frame, text="‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             style='Secondary.TButton',
                             command=self.show_main_menu,
                             width=25)
        back_btn.pack(ipady=8, anchor='center')
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        card = self.create_card_frame(main_frame)
        card.pack(expand=True, padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
        profile_header = tk.Label(card, text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", 
                                bg=self.colors['light'], fg=self.colors['dark'],
                                font=('Arial', 14, 'bold'), anchor='w')
        profile_header.pack(fill=tk.X, pady=(0, 15))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info_frame = tk.Frame(card, bg=self.colors['light'])
        user_info_frame.pack(fill=tk.X, pady=10)
        
        user_fields = [
            ("–ò–º—è:", self.current_user.get('name', '')),
            ("Email:", self.current_user.get('email', '')),
            ("–¢–µ–ª–µ—Ñ–æ–Ω:", self.current_user.get('phone', ''))
        ]
        
        for label, value in user_fields:
            field_frame = tk.Frame(user_info_frame, bg=self.colors['light'])
            field_frame.pack(fill=tk.X, pady=8)
            
            lbl = tk.Label(field_frame, text=label, bg=self.colors['light'], 
                         fg=self.colors['dark'], font=('Arial', 10, 'bold'),
                         width=10, anchor='w')
            lbl.pack(side=tk.LEFT)
            
            value_lbl = tk.Label(field_frame, text=value, bg=self.colors['light'], 
                               fg='#2c3e50', font=('Arial', 10),
                               anchor='w')
            value_lbl.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(10, 0))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ttk.Separator(card, orient='horizontal')
        separator.pack(fill=tk.X, pady=20)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
        profile_actions_frame = tk.Frame(card, bg=self.colors['light'])
        profile_actions_frame.pack(fill=tk.X, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º - —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –±–æ–ª—å—à–µ
        profile_buttons = [
            ("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", self.show_edit_profile, 'Accent.TButton'),
            ("üîí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", self.show_change_password, 'Secondary.TButton'),
            ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", self.confirm_delete_account, 'Danger.TButton')
        ]
        
        for text, command, style in profile_buttons:
            btn_frame = tk.Frame(profile_actions_frame, bg=self.colors['light'])
            btn_frame.pack(fill=tk.X, pady=6)
            
            btn = ttk.Button(btn_frame, text=text, style=style, command=command, width=25)
            btn.pack(ipady=8, anchor='center')
    

    def show_edit_profile(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        sub_label = ttk.Label(header_frame, text="–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–æ—Ä–º–æ–π
        card = self.create_card_frame(main_frame)
        card.pack(expand=True, padx=20, pady=10)
        
        form_frame = tk.Frame(card, bg=self.colors['light'])
        form_frame.pack(expand=True, pady=10)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        fields = [
            ("–ü–æ–ª–Ω–æ–µ –∏–º—è", "edit_full_name", self.current_user.get('name', '')),
            ("–¢–µ–ª–µ—Ñ–æ–Ω", "edit_phone", self.current_user.get('phone', ''))
        ]
        
        self.edit_entries = {}
        
        for i, (label, field_name, current_value) in enumerate(fields):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
            field_container = tk.Frame(form_frame, bg=self.colors['light'])
            field_container.pack(fill=tk.X, pady=12)
            
            # –ú–µ—Ç–∫–∞
            lbl = tk.Label(field_container, text=label, bg=self.colors['light'], 
                         fg=self.colors['dark'], font=('Arial', 10, 'bold'),
                         anchor='w')
            lbl.pack(fill=tk.X, pady=(0, 5))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry = ttk.Entry(field_container, font=('Arial', 11))
            entry.insert(0, current_value)
            entry.pack(fill=tk.X, pady=2, ipady=6)
            self.edit_entries[field_name] = entry
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(card, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=(20, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = ttk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
                             style='Success.TButton', 
                             command=self.perform_edit_profile)
        save_btn.pack(fill=tk.X, pady=6, ipady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = ttk.Button(btn_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                              style='Secondary.TButton', 
                              command=self.show_main_menu)
        cancel_btn.pack(fill=tk.X, pady=6, ipady=6)

    def show_change_password(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        sub_label = ttk.Label(header_frame, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–æ—Ä–º–æ–π
        card = self.create_card_frame(main_frame)
        card.pack(expand=True, padx=20, pady=10)
        
        form_frame = tk.Frame(card, bg=self.colors['light'])
        form_frame.pack(expand=True, pady=10)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", "new_password"),
            ("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", "confirm_password")
        ]
        
        self.password_entries = {}
        
        for i, (label, field_name) in enumerate(fields):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
            field_container = tk.Frame(form_frame, bg=self.colors['light'])
            field_container.pack(fill=tk.X, pady=12)
            
            # –ú–µ—Ç–∫–∞
            lbl = tk.Label(field_container, text=label, bg=self.colors['light'], 
                         fg=self.colors['dark'], font=('Arial', 10, 'bold'),
                         anchor='w')
            lbl.pack(fill=tk.X, pady=(0, 5))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry = ttk.Entry(field_container, font=('Arial', 11), show="‚Ä¢")
            entry.pack(fill=tk.X, pady=2, ipady=6)
            self.password_entries[field_name] = entry
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(card, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=(20, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = ttk.Button(btn_frame, text="üîí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", 
                             style='Success.TButton', 
                             command=self.perform_change_password)
        save_btn.pack(fill=tk.X, pady=6, ipady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = ttk.Button(btn_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                              style='Secondary.TButton', 
                              command=self.show_main_menu)
        cancel_btn.pack(fill=tk.X, pady=6, ipady=6)

    def perform_edit_profile(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        full_name = self.edit_entries["edit_full_name"].get().strip()
        phone = self.edit_entries["edit_phone"].get().strip()
        
        if not full_name or not phone:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        
        try:
            headers = {"token": self.auth_token}
            data = {
                "full_name": full_name,
                "phone": phone
            }
            
            response = requests.put(f"{API_BASE_URL}/users/me/", json=data, headers=headers)
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                self.get_user_profile()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def perform_change_password(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è"""
        new_password = self.password_entries["new_password"].get()
        confirm_password = self.password_entries["confirm_password"].get()
        
        if not new_password or not confirm_password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        
        if new_password != confirm_password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return
        
        try:
            headers = {"token": self.auth_token}
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º password –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
            data = {"password": new_password}
            
            response = requests.put(f"{API_BASE_URL}/users/me/password", json=data, headers=headers)
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
                self.show_main_menu()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def confirm_delete_account(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            icon='warning'
        )
        
        if result:
            self.perform_delete_account()

    def perform_delete_account(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            headers = {"token": self.auth_token}
            response = requests.delete(f"{API_BASE_URL}/users/delete_me/", headers=headers)
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                self.auth_token = None
                self.current_user = None
                self.show_auth_frame()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def confirm_logout(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?",
            icon='question'
        )
        
        if result:
            self.perform_logout()

    def perform_logout(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            headers = {"token": self.auth_token}
            response = requests.post(f"{API_BASE_URL}/users/logout/", headers=headers)
            
            # –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
            self.auth_token = None
            self.current_user = None
            self.show_auth_frame()
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
            else:
                # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã—Ö–æ–¥ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
                pass
                
        except requests.exceptions.RequestException:
            # –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.auth_token = None
            self.current_user = None
            self.show_auth_frame()
    def show_available_cars(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        back_frame = tk.Frame(header_frame, bg=self.colors['background'])
        back_frame.pack(fill=tk.X, pady=(0, 10))
        
        back_btn = ttk.Button(back_frame, text="‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             style='Secondary.TButton',
                             command=self.show_main_menu,
                             width=25)
        back_btn.pack(ipady=8, anchor='center')
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
        card = self.create_card_frame(main_frame)
        card.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        cars_header = tk.Label(card, text="üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ø—Ä–æ–¥–∞–∂–µ", 
                              bg=self.colors['light'], fg=self.colors['dark'],
                              font=('Arial', 14, 'bold'), anchor='w')
        cars_header.pack(fill=tk.X, pady=(0, 15))
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        cars_list_frame = tk.Frame(card, bg=self.colors['light'])
        cars_list_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
        list_header = tk.Label(cars_list_frame, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:",
                              bg=self.colors['light'], fg=self.colors['dark'],
                              font=('Arial', 12, 'bold'), anchor='w')
        list_header.pack(fill=tk.X, pady=(0, 10))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        self.load_and_display_available_cars(cars_list_frame)

    def load_and_display_available_cars(self, parent_frame):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–º"""
        try:
            headers = {"token": self.auth_token}
            response = requests.get(f"{API_BASE_URL}/users/cars/available", headers=headers)
            
            if response.status_code == 200:
                cars = response.json()
                
                if not cars:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                    no_cars_label = tk.Label(parent_frame, 
                                           text="–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
                                           bg=self.colors['light'], fg='#7f8c8d',
                                           font=('Arial', 11))
                    no_cars_label.pack(pady=20)
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –∫–∞–Ω–≤–∞—Å–æ–º –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–º
                container = tk.Frame(parent_frame, bg=self.colors['light'])
                container.pack(fill=tk.BOTH, expand=True)
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–≤–∞—Å –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
                canvas = tk.Canvas(container, bg=self.colors['light'], highlightthickness=0)
                scrollbar = ttk.Scrollbar(container, orient="vertical", command=canvas.yview)
                scrollable_frame = tk.Frame(canvas, bg=self.colors['light'])
                
                scrollable_frame.bind(
                    "<Configure>",
                    lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
                )
                
                canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
                canvas.configure(yscrollcommand=scrollbar.set)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
                def _on_mousewheel(event):
                    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
                
                canvas.bind("<MouseWheel>", _on_mousewheel)
                scrollable_frame.bind("<MouseWheel>", _on_mousewheel)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏
                self.create_cars_grid(scrollable_frame, cars)
                
                # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º canvas –∏ scrollbar
                canvas.pack(side="left", fill="both", expand=True)
                scrollbar.pack(side="right", fill="y")
                
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def create_cars_grid(self, parent, cars):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π 4xN"""
        columns = 4
        
        for i, car in enumerate(cars):
            row = i // columns
            col = i % columns
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            card_frame = self.create_car_card(car)
            card_frame.grid(row=row, column=col, padx=8, pady=8, sticky="nsew")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ —Å—Ç—Ä–æ–∫ –∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            parent.grid_rowconfigure(row, weight=1)
            parent.grid_columnconfigure(col, weight=1)


    def create_car_card(self, parent, car):
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        card_frame = tk.Frame(parent, bg='#ffffff', relief='solid', bd=1, padx=12, pady=12)
        card_frame.config(width=280, height=220)
        card_frame.pack_propagate(False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        info_frame = tk.Frame(card_frame, bg='#ffffff')
        info_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ)
        stamp_model = f"{car.get('stamp', '')} {car.get('model', '')}"
        if len(stamp_model) > 25:
            stamp_model = stamp_model[:25] + "..."
            
        stamp_model_label = tk.Label(info_frame, 
                                    text=f"üöó {stamp_model}",
                                    bg='#ffffff', fg=self.colors['dark'],
                                    font=('Arial', 11, 'bold'), anchor='w')
        stamp_model_label.pack(fill=tk.X, pady=(0, 5))
        
        # –î–µ—Ç–∞–ª–∏
        details = [
            f"üìè –ü—Ä–æ–±–µ–≥: {car.get('run_km', 0):,} –∫–º".replace(",", " "),
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {car.get('price', 0):,} —Ä—É–±".replace(",", " "),
            f"üî¢ VIN: {car.get('vin', '')[:12]}..." if len(car.get('vin', '')) > 12 else f"üî¢ VIN: {car.get('vin', '')}"
        ]
        
        for detail in details:
            detail_label = tk.Label(info_frame, text=detail,
                                   bg='#ffffff', fg='#2c3e50',
                                   font=('Arial', 9), anchor='w')
            detail_label.pack(fill=tk.X, pady=1)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = tk.Frame(card_frame, bg='#ffffff')
        actions_frame.pack(fill=tk.X, pady=(8, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ
        details_btn = ttk.Button(actions_frame, text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                                style='Secondary.TButton',
                                command=lambda c=car: self.show_car_details(c),
                                width=12)
        details_btn.pack(side=tk.LEFT, padx=(0, 5), ipady=3, expand=True, fill=tk.X)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
        buy_btn = ttk.Button(actions_frame, text="üõí –ö—É–ø–∏—Ç—å",
                            style='Success.TButton',
                            command=lambda c=car: self.confirm_purchase_car(c),
                            width=12)
        buy_btn.pack(side=tk.LEFT, ipady=3, expand=True, fill=tk.X)
        
        return card_frame

    def create_cars_grid(self, parent, cars):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π 4xN"""
        columns = 4
        
        for i, car in enumerate(cars):
            row = i // columns
            col = i % columns
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            card_frame = self.create_car_card(parent, car)
            card_frame.grid(row=row, column=col, padx=8, pady=8, sticky="nsew")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ —Å—Ç—Ä–æ–∫ –∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            parent.grid_rowconfigure(row, weight=1)
            parent.grid_columnconfigure(col, weight=1)


    def show_car_details(self, car):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        details_window = tk.Toplevel(self.root)
        details_window.title("–î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        details_window.geometry("500x400")
        details_window.configure(bg=self.colors['background'])
        details_window.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        details_window.transient(self.root)
        details_window.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(details_window, padding="10")
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        header_label = ttk.Label(header_frame, text="–î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        card = self.create_card_frame(details_window)
        card.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = tk.Frame(card, bg=self.colors['light'])
        info_frame.pack(fill=tk.BOTH, expand=True, pady=10, padx=10)
        
        details = [
            ("üöó –ú–∞—Ä–∫–∞:", car.get('stamp', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')),
            ("üöô –ú–æ–¥–µ–ª—å:", car.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')),
            ("üìè –ü—Ä–æ–±–µ–≥:", f"{car.get('run_km', 0):,} –∫–º".replace(",", " ")),
            ("üí∞ –¶–µ–Ω–∞:", f"{car.get('price', 0):,} —Ä—É–±".replace(",", " ")),
            ("üî¢ VIN:", car.get('vin', '–ù–µ —É–∫–∞–∑–∞–Ω')),
            ("üìã ID:", str(car.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')))
        ]
        
        for label, value in details:
            field_frame = tk.Frame(info_frame, bg=self.colors['light'])
            field_frame.pack(fill=tk.X, pady=8)
            
            lbl = tk.Label(field_frame, text=label, bg=self.colors['light'], 
                         fg=self.colors['dark'], font=('Arial', 11, 'bold'),
                         width=10, anchor='w')
            lbl.pack(side=tk.LEFT)
            
            value_lbl = tk.Label(field_frame, text=value, bg=self.colors['light'], 
                               fg='#2c3e50', font=('Arial', 11),
                               anchor='w')
            value_lbl.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(10, 0))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ttk.Separator(info_frame, orient='horizontal')
        separator.pack(fill=tk.X, pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
        buy_btn_frame = tk.Frame(info_frame, bg=self.colors['light'])
        buy_btn_frame.pack(fill=tk.X, pady=10)
        
        buy_btn = ttk.Button(buy_btn_frame, text="üõí –ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                            style='Success.TButton',
                            command=lambda: [details_window.destroy(), self.confirm_purchase_car(car)])
        buy_btn.pack(fill=tk.X, pady=6, ipady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = ttk.Button(buy_btn_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                              style='Secondary.TButton',
                              command=details_window.destroy)
        close_btn.pack(fill=tk.X, pady=6, ipady=6)

    def confirm_purchase_car(self, car):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏", 
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?\n\n"
            f"–ú–∞—Ä–∫–∞: {car.get('stamp', '')}\n"
            f"–ú–æ–¥–µ–ª—å: {car.get('model', '')}\n"
            f"–¶–µ–Ω–∞: {car.get('price', 0):,} —Ä—É–±\n"
            f"VIN: {car.get('vin', '')}",
            icon='question'
        )
        
        if result:
            self.perform_purchase_car(car['id'])

    def perform_purchase_car(self, car_id):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        try:
            headers = {"token": self.auth_token}
            response = requests.post(f"{API_BASE_URL}/users/cars/buy?car_id={car_id}", 
                                   headers=headers)
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                self.show_available_cars()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")


    def show_my_anketi(self): 
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –º–æ–∏—Ö –∞–Ω–∫–µ—Ç"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–ú–æ–∏ –∞–Ω–∫–µ—Ç—ã", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        back_frame = tk.Frame(header_frame, bg=self.colors['background'])
        back_frame.pack(fill=tk.X, pady=(0, 10))
        
        back_btn = ttk.Button(back_frame, text="‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             style='Secondary.TButton',
                             command=self.show_main_menu,
                             width=25)
        back_btn.pack(ipady=8, anchor='center')
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∞–Ω–∫–µ—Ç–∞–º–∏
        card = self.create_card_frame(main_frame)
        card.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        anketa_header = tk.Label(card, text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç–∞–º–∏", 
                                bg=self.colors['light'], fg=self.colors['dark'],
                                font=('Arial', 14, 'bold'), anchor='w')
        anketa_header.pack(fill=tk.X, pady=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
        create_btn_frame = tk.Frame(card, bg=self.colors['light'])
        create_btn_frame.pack(fill=tk.X, pady=10)
        
        create_btn = ttk.Button(create_btn_frame, text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É",
                               style='Success.TButton',
                               command=self.show_create_anketa_form,
                               width=30)
        create_btn.pack(ipady=10, anchor='center')
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ttk.Separator(card, orient='horizontal')
        separator.pack(fill=tk.X, pady=20)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç
        anketa_list_frame = tk.Frame(card, bg=self.colors['light'])
        anketa_list_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
        list_header = tk.Label(anketa_list_frame, text="–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∞–Ω–∫–µ—Ç—ã:",
                              bg=self.colors['light'], fg=self.colors['dark'],
                              font=('Arial', 12, 'bold'), anchor='w')
        list_header.pack(fill=tk.X, pady=(0, 10))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç
        self.load_and_display_anketi(anketa_list_frame)


    def load_and_display_anketi(self, parent_frame):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç —Å–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–º"""
        try:
            headers = {"token": self.auth_token}
            response = requests.get(f"{API_BASE_URL}/users/anketi/", headers=headers)
            
            if response.status_code == 200:
                anketi = response.json()
                
                if not anketi or (isinstance(anketi, dict) and anketi.get("message") == "–ê–Ω–∫–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"):
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–Ω–∫–µ—Ç
                    no_anketi_label = tk.Label(parent_frame, 
                                              text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç",
                                              bg=self.colors['light'], fg='#7f8c8d',
                                              font=('Arial', 11))
                    no_anketi_label.pack(pady=20)
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –∫–∞–Ω–≤–∞—Å–æ–º –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–º
                container = tk.Frame(parent_frame, bg=self.colors['light'])
                container.pack(fill=tk.BOTH, expand=True)
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–≤–∞—Å –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
                canvas = tk.Canvas(container, bg=self.colors['light'], highlightthickness=0)
                scrollbar = ttk.Scrollbar(container, orient="vertical", command=canvas.yview)
                scrollable_frame = tk.Frame(canvas, bg=self.colors['light'])
                
                scrollable_frame.bind(
                    "<Configure>",
                    lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
                )
                
                canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
                canvas.configure(yscrollcommand=scrollbar.set)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
                def _on_mousewheel(event):
                    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
                
                canvas.bind("<MouseWheel>", _on_mousewheel)
                scrollable_frame.bind("<MouseWheel>", _on_mousewheel)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏
                self.create_anketa_grid(scrollable_frame, anketi)
                
                # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º canvas –∏ scrollbar
                canvas.pack(side="left", fill="both", expand=True)
                scrollbar.pack(side="right", fill="y")
                
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def create_anketa_card(self, parent, anketa):
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
        card_frame = tk.Frame(parent, bg='#ffffff', relief='solid', bd=1, padx=12, pady=12)
        card_frame.config(width=280, height=200)
        card_frame.pack_propagate(False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∫–µ—Ç–µ
        info_frame = tk.Frame(card_frame, bg='#ffffff')
        info_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ)
        stamp_model = f"{anketa.get('stamp', '')} {anketa.get('model_car', '')}"
        if len(stamp_model) > 25:
            stamp_model = stamp_model[:25] + "..."
            
        stamp_model_label = tk.Label(info_frame, 
                                    text=f"üöó {stamp_model}",
                                    bg='#ffffff', fg=self.colors['dark'],
                                    font=('Arial', 11, 'bold'), anchor='w')
        stamp_model_label.pack(fill=tk.X, pady=(0, 5))
        
        # –î–µ—Ç–∞–ª–∏
        vin = anketa.get('vin', '')
        display_vin = f"üî¢ {vin[:12]}..." if len(vin) > 12 else f"üî¢ {vin}"
        
        details = [
            f"üìè –ü—Ä–æ–±–µ–≥: {anketa.get('run', 0):,} –∫–º".replace(",", " "),
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {anketa.get('price', 0):,} —Ä—É–±".replace(",", " "),
            display_vin
        ]
        
        for detail in details:
            detail_label = tk.Label(info_frame, text=detail,
                                   bg='#ffffff', fg='#2c3e50',
                                   font=('Arial', 9), anchor='w')
            detail_label.pack(fill=tk.X, pady=1)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        description = anketa.get('description', '')
        if description:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if len(description) > 60:
                description = description[:60] + "..."
            
            desc_label = tk.Label(info_frame, text=f"üìÑ {description}",
                                 bg='#ffffff', fg='#7f8c8d',
                                 font=('Arial', 8), anchor='w', justify=tk.LEFT, wraplength=240)
            desc_label.pack(fill=tk.X, pady=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = tk.Frame(card_frame, bg='#ffffff')
        actions_frame.pack(fill=tk.X, pady=(8, 0))
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_btn = ttk.Button(actions_frame, text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                             style='Secondary.TButton',
                             command=lambda a=anketa: self.show_edit_anketa_form(a),
                             width=8)
        edit_btn.pack(side=tk.LEFT, padx=(0, 5), ipady=3, expand=True, fill=tk.X)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = ttk.Button(actions_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                               style='Danger.TButton',
                               command=lambda a=anketa: self.confirm_delete_anketa(a),
                               width=8)
        delete_btn.pack(side=tk.LEFT, ipady=3, expand=True, fill=tk.X)
        
        return card_frame

    def create_anketa_grid(self, parent, anketi):
        columns = 4
        
        for i, anketa in enumerate(anketi):
            row = i // columns
            col = i % columns
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞–Ω–∫–µ—Ç—ã
            card_frame = self.create_anketa_card(parent, anketa)
            card_frame.grid(row=row, column=col, padx=8, pady=8, sticky="nsew")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ —Å—Ç—Ä–æ–∫ –∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            parent.grid_rowconfigure(row, weight=1)
            parent.grid_columnconfigure(col, weight=1)

    def show_create_anketa_form(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_frame = tk.Frame(header_frame, bg=self.colors['background'])
        back_frame.pack(fill=tk.X, pady=(0, 10))
        
        back_btn = ttk.Button(back_frame, text="‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∞–Ω–∫–µ—Ç",
                             style='Secondary.TButton',
                             command=self.show_my_anketi,
                             width=25)
        back_btn.pack(ipady=8, anchor='center')
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–æ—Ä–º–æ–π
        card = self.create_card_frame(main_frame)
        card.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        form_frame = tk.Frame(card, bg=self.colors['light'])
        form_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", "create_stamp"),
            ("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", "create_model_car"),
            ("–ü—Ä–æ–±–µ–≥ (–∫–º)", "create_run"),
            ("–¶–µ–Ω–∞ (—Ä—É–±)", "create_price"),
            ("VIN –Ω–æ–º–µ—Ä", "create_vin"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", "create_description")
        ]
        
        self.create_anketa_entries = {}
        
        for i, (label, field_name) in enumerate(fields):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
            field_container = tk.Frame(form_frame, bg=self.colors['light'])
            field_container.pack(fill=tk.X, pady=12)
            
            # –ú–µ—Ç–∫–∞
            lbl = tk.Label(field_container, text=label, bg=self.colors['light'], 
                         fg=self.colors['dark'], font=('Arial', 10, 'bold'),
                         anchor='w')
            lbl.pack(fill=tk.X, pady=(0, 5))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            if field_name == "create_description":
                entry = tk.Text(field_container, font=('Arial', 11), height=4, wrap=tk.WORD)
                entry.pack(fill=tk.X, pady=2)
            else:
                entry = ttk.Entry(field_container, font=('Arial', 11))
                if "run" in field_name or "price" in field_name:
                    entry.config(validate="key", validatecommand=(self.root.register(self.validate_number), '%P'))
                entry.pack(fill=tk.X, pady=2, ipady=6)
            
            self.create_anketa_entries[field_name] = entry
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(card, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=(20, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = ttk.Button(btn_frame, text="üíæ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", 
                             style='Success.TButton', 
                             command=self.perform_create_anketa)
        save_btn.pack(fill=tk.X, pady=6, ipady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = ttk.Button(btn_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                              style='Secondary.TButton', 
                              command=self.show_my_anketi)
        cancel_btn.pack(fill=tk.X, pady=6, ipady=6)

    def show_edit_anketa_form(self, anketa):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
        self.clear_window()
        self.current_editing_anketa = anketa
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_frame = tk.Frame(header_frame, bg=self.colors['background'])
        back_frame.pack(fill=tk.X, pady=(0, 10))
        
        back_btn = ttk.Button(back_frame, text="‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∞–Ω–∫–µ—Ç",
                             style='Secondary.TButton',
                             command=self.show_my_anketi,
                             width=25)
        back_btn.pack(ipady=8, anchor='center')
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–æ—Ä–º–æ–π
        card = self.create_card_frame(main_frame)
        card.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        form_frame = tk.Frame(card, bg=self.colors['light'])
        form_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        fields = [
            ("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", "edit_stamp", anketa.get('stamp', '')),
            ("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", "edit_model_car", anketa.get('model_car', '')),
            ("–ü—Ä–æ–±–µ–≥ (–∫–º)", "edit_run", str(anketa.get('run', 0))),
            ("–¶–µ–Ω–∞ (—Ä—É–±)", "edit_price", str(anketa.get('price', 0))),
            ("VIN –Ω–æ–º–µ—Ä", "edit_vin", anketa.get('vin', '')),
            ("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", "edit_description", anketa.get('description', ''))
        ]
        
        self.edit_anketa_entries = {}
        
        for i, (label, field_name, current_value) in enumerate(fields):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
            field_container = tk.Frame(form_frame, bg=self.colors['light'])
            field_container.pack(fill=tk.X, pady=12)
            
            # –ú–µ—Ç–∫–∞
            lbl = tk.Label(field_container, text=label, bg=self.colors['light'], 
                         fg=self.colors['dark'], font=('Arial', 10, 'bold'),
                         anchor='w')
            lbl.pack(fill=tk.X, pady=(0, 5))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            if field_name == "edit_description":
                entry = tk.Text(field_container, font=('Arial', 11), height=4, wrap=tk.WORD)
                entry.insert('1.0', current_value)
                entry.pack(fill=tk.X, pady=2)
            else:
                entry = ttk.Entry(field_container, font=('Arial', 11))
                entry.insert(0, current_value)
                if "run" in field_name or "price" in field_name:
                    entry.config(validate="key", validatecommand=(self.root.register(self.validate_number), '%P'))
                entry.pack(fill=tk.X, pady=2, ipady=6)
            
            self.edit_anketa_entries[field_name] = entry
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(card, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=(20, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = ttk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
                             style='Success.TButton', 
                             command=self.perform_edit_anketa)
        save_btn.pack(fill=tk.X, pady=6, ipady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = ttk.Button(btn_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                              style='Secondary.TButton', 
                              command=self.show_my_anketi)
        cancel_btn.pack(fill=tk.X, pady=6, ipady=6)

    def validate_number(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π"""
        if value == "":
            return True
        try:
            int(value)
            return True
        except ValueError:
            return False

    def perform_create_anketa(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É"""
        try:
            data = {
                "stamp": self.get_entry_value("create_stamp"),
                "model_car": self.get_entry_value("create_model_car"),
                "run": int(self.get_entry_value("create_run")),
                "price": int(self.get_entry_value("create_price")),
                "vin": self.get_entry_value("create_vin"),
                "description": self.get_text_value("create_description")
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ["stamp", "model_car", "run", "price", "vin"]
            for field in required_fields:
                if not data[field]:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ: {field}")
                    return
            
            headers = {"token": self.auth_token}
            response = requests.post(f"{API_BASE_URL}/users/anketa/create", json=data, headers=headers)
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                self.show_my_anketi()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–±–µ–≥ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def perform_edit_anketa(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É"""
        try:
            data = {}
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            fields_mapping = {
                "edit_stamp": "stamp",
                "edit_model_car": "model_car", 
                "edit_run": "run",
                "edit_price": "price",
                "edit_vin": "vin",
                "edit_description": "description"
            }
            
            for entry_name, field_name in fields_mapping.items():
                if entry_name in ["edit_run", "edit_price"]:
                    value = self.get_entry_value(entry_name)
                    if value and value != str(self.current_editing_anketa.get(field_name, '')):
                        data[field_name] = int(value)
                elif entry_name == "edit_description":
                    value = self.get_text_value(entry_name)
                    if value != self.current_editing_anketa.get(field_name, ''):
                        data[field_name] = value
                else:
                    value = self.get_entry_value(entry_name)
                    if value != self.current_editing_anketa.get(field_name, ''):
                        data[field_name] = value
            
            if not data:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return
            
            headers = {"token": self.auth_token}
            anketa_id = self.current_editing_anketa['id']
            response = requests.put(f"{API_BASE_URL}/users/anketa/update?anketa_id={anketa_id}", 
                                  json=data, headers=headers)
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                self.show_my_anketi()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–±–µ–≥ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def confirm_delete_anketa(self, anketa):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É?\n\n"
            f"–ú–∞—Ä–∫–∞: {anketa.get('stamp', '')}\n"
            f"–ú–æ–¥–µ–ª—å: {anketa.get('model_car', '')}\n"
            f"VIN: {anketa.get('vin', '')}",
            icon='warning'
        )
        
        if result:
            self.perform_delete_anketa(anketa['id'])

    def perform_delete_anketa(self, anketa_id):
        """–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É"""
        try:
            headers = {"token": self.auth_token}
            response = requests.delete(f"{API_BASE_URL}/users/anketa/delete?anketa_id={anketa_id}", 
                                     headers=headers)
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                self.show_my_anketi()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def get_entry_value(self, entry_name):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Entry"""
        entry = self.create_anketa_entries.get(entry_name) or self.edit_anketa_entries.get(entry_name)
        if entry and hasattr(entry, 'get'):
            return entry.get().strip()
        return ""

    def get_text_value(self, text_name):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Text"""
        text_widget = self.create_anketa_entries.get(text_name) or self.edit_anketa_entries.get(text_name)
        if text_widget and hasattr(text_widget, 'get'):
            return text_widget.get('1.0', 'end-1c').strip()
        return ""

    def show_my_purchases(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–∫—É–ø–∫–∏"""
        messagebox.showinfo("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–†–∞–∑–¥–µ–ª '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

if __name__ == "__main__":
    root = tk.Tk()
    app = CarTradingApp(root)
    root.mainloop() 
