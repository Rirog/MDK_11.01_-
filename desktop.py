import tkinter as tk
from tkinter import ttk, messagebox
import requests
import json

API_BASE_URL = "http://localhost:8000"

class CarTradingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("AvtoLimonchik")
        self.root.geometry("500x700")
        self.root.configure(bg='#2c3e50')
        self.root.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        self.center_window()
        
        self.auth_token = None
        
        self.setup_styles()
        self.show_auth_frame()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry('{}x{}+{}+{}'.format(width, height, x, y))
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        self.colors = {
            'primary': '#3498db',
            'secondary': '#2c3e50',
            'success': '#2ecc71',
            'danger': '#e74c3c',
            'warning': '#f39c12',
            'light': '#ecf0f1',
            'dark': '#34495e',
            'background': '#2c3e50',
            'accent': '#e67e22'
        }
        
        self.style.configure('TFrame', background=self.colors['background'])
        self.style.configure('TLabel', background=self.colors['background'], 
                           foreground=self.colors['light'], font=('Arial', 10))
        self.style.configure('TButton', font=('Arial', 10, 'bold'))
        self.style.configure('Header.TLabel', font=('Arial', 20, 'bold'), 
                           foreground=self.colors['light'])
        self.style.configure('Accent.TButton', background=self.colors['accent'],
                           foreground='white', focuscolor='none')
        self.style.configure('Secondary.TButton', background=self.colors['dark'],
                           foreground=self.colors['light'], focuscolor='none')
        self.style.configure('Success.TButton', background=self.colors['success'],
                           foreground='white', focuscolor='none')
        
        self.style.map('Accent.TButton', 
                      background=[('active', '#d35400'),
                                 ('pressed', '#ba4a00')])
        self.style.map('Secondary.TButton',
                      background=[('active', '#2c3e50'),
                                 ('pressed', '#1a252f')])
        self.style.map('Success.TButton',
                      background=[('active', '#27ae60'),
                                 ('pressed', '#219955')])
    
    def clear_window(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞"""
        for widget in self.root.winfo_children():
            widget.destroy()
    
    def create_card_frame(self, parent):
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        card = tk.Frame(parent, bg=self.colors['light'], relief='raised', 
                       bd=1, padx=20, pady=20)
        return card
    
    def show_auth_frame(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä–µ–π–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.clear_window()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(10, 20))
        
        # –ò–∫–æ–Ω–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∫–∞–∫ —ç–º–æ–¥–∑–∏
        car_icon = tk.Label(header_frame, text="üöó", font=('Arial', 40), 
                           bg=self.colors['background'], fg=self.colors['light'])
        car_icon.pack(pady=(0, 10))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = ttk.Label(header_frame, text="AvtoLimonchik", 
                               style='Header.TLabel')
        header_label.pack(pady=(0, 5))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        sub_label = ttk.Label(header_frame, text="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ttk.Separator(header_frame, orient='horizontal')
        separator.pack(fill=tk.X, pady=10)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        card = self.create_card_frame(main_frame)
        card.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        welcome_text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AvtoLimonchik!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n" 
            "‚Ä¢ –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É —Ñ–∏—Ä–º—ã\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
        )
        
        welcome_label = tk.Label(card, text=welcome_text, 
                               bg=self.colors['light'], fg=self.colors['dark'],
                               font=('Arial', 11), justify=tk.LEFT)
        welcome_label.pack(pady=20, anchor='w')
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(card, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        login_btn = ttk.Button(btn_frame, text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", 
                              style='Accent.TButton', 
                              command=self.show_login)
        login_btn.pack(fill=tk.X, pady=8, ipady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        register_btn = ttk.Button(btn_frame, text="–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", 
                                 style='Success.TButton', 
                                 command=self.show_register)
        register_btn.pack(fill=tk.X, pady=8, ipady=10)
        
        # –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
        footer_frame = ttk.Frame(main_frame)
        footer_frame.pack(fill=tk.X, pady=(18, 10))
        
        footer_label = ttk.Label(footer_frame, text="¬© 2025 AvtoLimonchik. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.", 
                               font=('Arial', 9), foreground='#95a5a6')
        footer_label.pack()
    
    def show_login(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        sub_label = ttk.Label(header_frame, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–æ—Ä–º–æ–π
        card = self.create_card_frame(main_frame)
        card.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        form_frame = tk.Frame(card, bg=self.colors['light'])
        form_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "login_email_phone"),
            ("–ü–∞—Ä–æ–ª—å", "login_password")
        ]
        
        self.login_entries = {}
        
        for i, (label, field_name) in enumerate(fields):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
            field_container = tk.Frame(form_frame, bg=self.colors['light'])
            field_container.pack(fill=tk.X, pady=12)
            
            # –ú–µ—Ç–∫–∞
            lbl = tk.Label(field_container, text=label, bg=self.colors['light'], 
                         fg=self.colors['dark'], font=('Arial', 10, 'bold'),
                         anchor='w')
            lbl.pack(fill=tk.X, pady=(0, 5))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry = ttk.Entry(field_container, font=('Arial', 11))
            if "password" in field_name:
                entry.config(show="‚Ä¢")
            entry.pack(fill=tk.X, pady=2, ipady=6)
            self.login_entries[field_name] = entry
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(card, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=(10, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        login_btn = ttk.Button(btn_frame, text="–í–æ–π—Ç–∏", 
                              style='Accent.TButton', 
                              command=self.perform_login)
        login_btn.pack(fill=tk.X, pady=6, ipady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = ttk.Button(btn_frame, text="–ù–∞–∑–∞–¥", 
                             style='Secondary.TButton', 
                             command=self.show_auth_frame)
        back_btn.pack(fill=tk.X, pady=6, ipady=6)
    
    def show_register(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        header_label = ttk.Label(header_frame, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", 
                               style='Header.TLabel')
        header_label.pack(pady=(10, 5))
        
        sub_label = ttk.Label(header_frame, text="–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–æ—Ä–º–æ–π
        card = self.create_card_frame(main_frame)
        card.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        form_container = tk.Frame(card, bg=self.colors['light'])
        form_container.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞", "register_email"),
            ("–¢–µ–ª–µ—Ñ–æ–Ω", "register_phone"), 
            ("–ü–æ–ª–Ω–æ–µ –∏–º—è", "register_full_name"),
            ("–ü–∞—Ä–æ–ª—å", "register_password")
        ]

        self.register_entries = {}
        
        for i, (label, field_name) in enumerate(fields):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
            field_frame = tk.Frame(form_container, bg=self.colors['light'])
            field_frame.pack(fill=tk.X, pady=10)
            
            # –ú–µ—Ç–∫–∞
            lbl = tk.Label(field_frame, text=label, 
                         bg=self.colors['light'], fg=self.colors['dark'],
                         font=('Arial', 10, 'bold'), anchor='w')
            lbl.pack(fill=tk.X, pady=(0, 5))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry = ttk.Entry(field_frame, font=('Arial', 11))
            if "password" in field_name:
                entry.config(show="‚Ä¢")
            entry.pack(fill=tk.X, ipady=5)
            self.register_entries[field_name] = entry
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ttk.Separator(form_container, orient='horizontal')
        separator.pack(fill=tk.X, pady=20)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(form_container, bg=self.colors['light'])
        btn_frame.pack(fill=tk.X, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        register_btn = ttk.Button(btn_frame, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", 
                                 style='Success.TButton', 
                                 command=self.perform_register)
        register_btn.pack(fill=tk.X, pady=4, ipady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = ttk.Button(btn_frame, text="–ù–∞–∑–∞–¥", 
                             style='Secondary.TButton', 
                             command=self.show_auth_frame)
        back_btn.pack(fill=tk.X, pady=1, ipady=1)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_label = tk.Label(form_container, 
                             text="–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
                             bg=self.colors['light'], fg='#7f8c8d',
                             font=('Arial', 9))
        hint_label.pack(pady=10)
    
    def perform_login(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥"""
        email_phone = self.login_entries["login_email_phone"].get().strip()
        password = self.login_entries["login_password"].get()
        
        if not email_phone or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, email —ç—Ç–æ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        login_data = {"password": password}
        if "@" in email_phone:
            login_data["email"] = email_phone
        else:
            login_data["phone"] = email_phone
        
        try:
            response = requests.post(f"{API_BASE_URL}/users/auth/", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data["token"]
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.show_main_menu()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
    
    def perform_register(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
        data = {
            "email": self.register_entries["register_email"].get().strip(),
            "phone": self.register_entries["register_phone"].get().strip(),
            "full_name": self.register_entries["register_full_name"].get().strip(),
            "password": self.register_entries["register_password"].get()
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
        for field, value in data.items():
            if not value:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return
        
        try:
            response = requests.post(f"{API_BASE_URL}/users/register/", json=data)
            
            if response.status_code == 200:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                for entry in self.register_entries.values():
                    entry.delete(0, tk.END)
                self.show_login()
            else:
                error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")




    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        self.clear_window()
        
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        car_icon = tk.Label(header_frame, text="üöó", font=('Arial', 30), 
                           bg=self.colors['background'], fg=self.colors['light'])
        car_icon.pack(pady=(0, 5))
        
        header_label = ttk.Label(header_frame, text="AvtoLimonchik", 
                               style='Header.TLabel')
        header_label.pack(pady=(0, 5))
        
        sub_label = ttk.Label(header_frame, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                            font=('Arial', 12), foreground='#bdc3c7')
        sub_label.pack(pady=(0, 10))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –º–µ–Ω—é
        card = self.create_card_frame(main_frame)
        card.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        welcome_label = tk.Label(card, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!", 
                               bg=self.colors['light'], fg=self.colors['dark'],
                               font=('Arial', 14, 'bold'))
        welcome_label.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        menu_buttons = [
            ("–ú–æ–∏ –∞–Ω–∫–µ—Ç—ã", self.show_anketi),
            ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏", self.show_cars),
            ("–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", self.show_purchases),
            ("–ü—Ä–æ—Ñ–∏–ª—å", self.show_profile)
        ]
        
        for text, command in menu_buttons:
            btn = ttk.Button(card, text=text, style='Secondary.TButton',
                           command=command)
            btn.pack(fill=tk.X, pady=8, ipady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        logout_btn = ttk.Button(card, text="–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", 
                               style='Accent.TButton', command=self.logout)
        logout_btn.pack(fill=tk.X, pady=(20, 10), ipady=8)
    
    def show_anketi(self):
        messagebox.showinfo("–ò–Ω—Ñ–æ", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_cars(self):
        messagebox.showinfo("–ò–Ω—Ñ–æ", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_purchases(self):
        messagebox.showinfo("–ò–Ω—Ñ–æ", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_profile(self):
        messagebox.showinfo("–ò–Ω—Ñ–æ", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        if self.auth_token:
            try:
                requests.post(f"{API_BASE_URL}/users/logout/", 
                             headers={"token": self.auth_token})
            except:
                pass
        self.auth_token = None
        self.show_auth_frame()

if __name__ == "__main__":
    root = tk.Tk()
    app = CarTradingApp(root)
    root.mainloop()
