from database import database_connection
from models import Users, Roles, UserRoles, Stamp, ModelCar, Status, Cars, Anketa, Shopping, Sales
from argon2 import PasswordHasher
import re
from datetime import datetime, timedelta

ph = PasswordHasher()

def seed_database():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–º–∏–Ω–∏–º—É–º 15 –∑–∞–ø–∏—Å–µ–π)"""
    
    try:
        database_connection.connect()
        
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
        print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π...")
        roles_data = [
            {"name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"},
            {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"},
            {"name": "–ú–µ–Ω–µ–¥–∂–µ—Ä"}
        ]
        
        for role_data in roles_data:
            role, created = Roles.get_or_create(name=role_data["name"])
            if created:
                print(f"   ‚úÖ –†–æ–ª—å '{role.name}' —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print(f"   ‚ÑπÔ∏è  –†–æ–ª—å '{role.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤...")
        statuses_data = [
            {"status": "–î–æ—Å—Ç—É–ø–µ–Ω"},
            {"status": "–ü—Ä–æ–¥–∞–Ω"},
        ]
        
        for status_data in statuses_data:
            status, created = Status.get_or_create(status=status_data["status"])
            if created:
                print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å '{status.status}' —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"   ‚ÑπÔ∏è  –°—Ç–∞—Ç—É—Å '{status.status}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (10+ –∑–∞–ø–∏—Å–µ–π)
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
        stamps_data = [
            {"stamp": "Toyota"}, {"stamp": "Honda"}, {"stamp": "BMW"}, 
            {"stamp": "Mercedes-Benz"}, {"stamp": "Audi"}, {"stamp": "Ford"},
            {"stamp": "Volkswagen"}, {"stamp": "Nissan"}, {"stamp": "Hyundai"},
            {"stamp": "Kia"}, {"stamp": "Lexus"}, {"stamp": "Mazda"},
            {"stamp": "Subaru"}, {"stamp": "Volvo"}, {"stamp": "Chevrolet"}
        ]
        
        for stamp_data in stamps_data:
            stamp, created = Stamp.get_or_create(stamp=stamp_data["stamp"])
            if created:
                print(f"   ‚úÖ –ú–∞—Ä–∫–∞ '{stamp.stamp}' —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print(f"   ‚ÑπÔ∏è  –ú–∞—Ä–∫–∞ '{stamp.stamp}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
        models_data = [
            {"model_car": "Camry"}, {"model_car": "Civic"}, {"model_car": "X5"},
            {"model_car": "E-Class"}, {"model_car": "A4"}, {"model_car": "Focus"},
            {"model_car": "Golf"}, {"model_car": "Altima"}, {"model_car": "Elantra"},
            {"model_car": "Rio"}, {"model_car": "RX"}, {"model_car": "CX-5"},
            {"model_car": "Outback"}, {"model_car": "XC60"}, {"model_car": "Cruze"},
            {"model_car": "Corolla"}, {"model_car": "Accord"}, {"model_car": "3 Series"},
            {"model_car": "C-Class"}, {"model_car": "Q5"}
        ]
        
        for model_data in models_data:
            model, created = ModelCar.get_or_create(model_car=model_data["model_car"])
            if created:
                print(f"   ‚úÖ –ú–æ–¥–µ–ª—å '{model.model_car}' —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print(f"   ‚ÑπÔ∏è  –ú–æ–¥–µ–ª—å '{model.model_car}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (3 –∑–∞–ø–∏—Å–∏)
        print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")
        admins_data = [
            {
                "email": "limon@gmail.com",
                "phone": "+79991234567",
                "full_name": "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "password": "root"
            }
        ]
        
        admin_role = Roles.get(Roles.name == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        for admin_data in admins_data:
            if not re.match(r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$', admin_data["email"]):
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email: {admin_data['email']}")
                continue
                
            if not re.match(r'^\+7\d{10}$', admin_data["phone"]):
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {admin_data['phone']}")
                continue
            
            admin, created = Users.get_or_create(
                email=admin_data["email"],
                defaults={
                    'phone': admin_data["phone"],
                    'full_name': admin_data["full_name"],
                    'password': ph.hash(admin_data["password"])
                }
            )
            
            if created:
                UserRoles.create(user_id=admin.id, role_id=admin_role.id)
                print(f"   ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{admin.full_name}' —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"   ‚ÑπÔ∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{admin.full_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (10+ –∑–∞–ø–∏—Å–µ–π)
        print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users_data = [
            {"email": "user1@example.com", "phone": "+79992345678", "full_name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "password": "user123"},
            {"email": "user2@example.com", "phone": "+79993456789", "full_name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", "password": "user123"},
            {"email": "user3@example.com", "phone": "+79994567890", "full_name": "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", "password": "user123"},
            {"email": "user4@example.com", "phone": "+79995678901", "full_name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞", "password": "user123"},
            {"email": "user5@example.com", "phone": "+79996789012", "full_name": "–î–º–∏—Ç—Ä–∏–π –í–∞—Å–∏–ª—å–µ–≤", "password": "user123"},
            {"email": "user6@example.com", "phone": "+79997890123", "full_name": "–û–ª—å–≥–∞ –ú–∏—Ö–∞–π–ª–æ–≤–∞", "password": "user123"},
            {"email": "user7@example.com", "phone": "+79998901234", "full_name": "–°–µ—Ä–≥–µ–π –§–µ–¥–æ—Ä–æ–≤", "password": "user123"},
            {"email": "user8@example.com", "phone": "+79999012345", "full_name": "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞", "password": "user123"},
            {"email": "user9@example.com", "phone": "+79990123456", "full_name": "–ü–∞–≤–µ–ª –ú–æ—Ä–æ–∑–æ–≤", "password": "user123"},
            {"email": "user10@example.com", "phone": "+79991234560", "full_name": "–ù–∞—Ç–∞–ª—å—è –í–æ—Ä–æ–±—å–µ–≤–∞", "password": "user123"},
            {"email": "user11@example.com", "phone": "+79992234561", "full_name": "–í–∏–∫—Ç–æ—Ä –û—Ä–ª–æ–≤", "password": "user123"},
            {"email": "user12@example.com", "phone": "+79993234562", "full_name": "–Æ–ª–∏—è –ó–∞–π—Ü–µ–≤–∞", "password": "user123"}
        ]
        
        user_role = Roles.get(Roles.name == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        for user_data in users_data:
            if not re.match(r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$', user_data["email"]):
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email: {user_data['email']}")
                continue
                
            if not re.match(r'^\+7\d{10}$', user_data["phone"]):
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone']}")
                continue
            
            user, created = Users.get_or_create(
                email=user_data["email"],
                defaults={
                    'phone': user_data["phone"],
                    'full_name': user_data["full_name"],
                    'password': ph.hash(user_data["password"])
                }
            )
            
            if created:
                UserRoles.create(user_id=user.id, role_id=user_role.id)
                print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user.full_name}' —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"   ‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user.full_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (15+ –∑–∞–ø–∏—Å–µ–π)
        print("\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        available_status = Status.get(Status.status == "–î–æ—Å—Ç—É–ø–µ–Ω")
        sold_status = Status.get(Status.status == "–ü—Ä–æ–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏
        toyota_stamp = Stamp.get(Stamp.stamp == "Toyota")
        honda_stamp = Stamp.get(Stamp.stamp == "Honda") 
        bmw_stamp = Stamp.get(Stamp.stamp == "BMW")
        mercedes_stamp = Stamp.get(Stamp.stamp == "Mercedes-Benz")
        audi_stamp = Stamp.get(Stamp.stamp == "Audi")
        ford_stamp = Stamp.get(Stamp.stamp == "Ford")
        vw_stamp = Stamp.get(Stamp.stamp == "Volkswagen")
        nissan_stamp = Stamp.get(Stamp.stamp == "Nissan")
        hyundai_stamp = Stamp.get(Stamp.stamp == "Hyundai")
        kia_stamp = Stamp.get(Stamp.stamp == "Kia")
        lexus_stamp = Stamp.get(Stamp.stamp == "Lexus")
        mazda_stamp = Stamp.get(Stamp.stamp == "Mazda")
        subaru_stamp = Stamp.get(Stamp.stamp == "Subaru")
        volvo_stamp = Stamp.get(Stamp.stamp == "Volvo")
        chevrolet_stamp = Stamp.get(Stamp.stamp == "Chevrolet")
        
        camry_model = ModelCar.get(ModelCar.model_car == "Camry")
        civic_model = ModelCar.get(ModelCar.model_car == "Civic")
        x5_model = ModelCar.get(ModelCar.model_car == "X5")
        eclass_model = ModelCar.get(ModelCar.model_car == "E-Class")
        a4_model = ModelCar.get(ModelCar.model_car == "A4")
        focus_model = ModelCar.get(ModelCar.model_car == "Focus")
        golf_model = ModelCar.get(ModelCar.model_car == "Golf")
        altima_model = ModelCar.get(ModelCar.model_car == "Altima")
        elantra_model = ModelCar.get(ModelCar.model_car == "Elantra")
        rio_model = ModelCar.get(ModelCar.model_car == "Rio")
        rx_model = ModelCar.get(ModelCar.model_car == "RX")
        cx5_model = ModelCar.get(ModelCar.model_car == "CX-5")
        outback_model = ModelCar.get(ModelCar.model_car == "Outback")
        xc60_model = ModelCar.get(ModelCar.model_car == "XC60")
        cruze_model = ModelCar.get(ModelCar.model_car == "Cruze")
        corolla_model = ModelCar.get(ModelCar.model_car == "Corolla")
        accord_model = ModelCar.get(ModelCar.model_car == "Accord")
        three_series_model = ModelCar.get(ModelCar.model_car == "3 Series")
        cclass_model = ModelCar.get(ModelCar.model_car == "C-Class")
        q5_model = ModelCar.get(ModelCar.model_car == "Q5")
        
        cars_data = [
            # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (10+ –∑–∞–ø–∏—Å–µ–π)
            {"stamp_id": toyota_stamp, "model_car_id": camry_model, "run_km": 45000, "vin": "JTDBR32E160123401", "status_id": available_status, "price": 1500000, "description": "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ–ª–Ω–∞—è —Å–µ—Ä–≤–∏—Å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"},
            {"stamp_id": honda_stamp, "model_car_id": civic_model, "run_km": 32000, "vin": "2HGFA16507H123402", "status_id": available_status, "price": 1200000, "description": "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –Ω–∏–∑–∫–∏–π —Ä–∞—Å—Ö–æ–¥"},
            {"stamp_id": bmw_stamp, "model_car_id": x5_model, "run_km": 78000, "vin": "5UXKR0C58K0L123403", "status_id": available_status, "price": 3500000, "description": "–ü—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å, –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç, –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω"},
            {"stamp_id": mercedes_stamp, "model_car_id": eclass_model, "run_km": 55000, "vin": "WDDHF5EB7EA123404", "status_id": available_status, "price": 2800000, "description": "–ö–æ–º—Ñ–æ—Ä—Ç –∏ —Ä–æ—Å–∫–æ—à—å, —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ –≤–æ–¥–∏—Ç–µ–ª—é"},
            {"stamp_id": audi_stamp, "model_car_id": a4_model, "run_km": 42000, "vin": "WAUFFAFLXFN123405", "status_id": available_status, "price": 2200000, "description": "–ù–µ–º–µ—Ü–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥, –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å"},
            {"stamp_id": ford_stamp, "model_car_id": focus_model, "run_km": 67000, "vin": "1FADP3F2XEL123406", "status_id": available_status, "price": 950000, "description": "–ù–∞–¥–µ–∂–Ω—ã–π —Ö–µ—Ç—á–±–µ–∫, –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞"},
            {"stamp_id": vw_stamp, "model_car_id": golf_model, "run_km": 38000, "vin": "3VW467ATXHM123407", "status_id": available_status, "price": 1100000, "description": "–ö—É–ª—å—Ç–æ–≤—ã–π Golf, –æ—Ç–ª–∏—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞"},
            {"stamp_id": nissan_stamp, "model_car_id": altima_model, "run_km": 51000, "vin": "1N4AL3AP6JC123408", "status_id": available_status, "price": 1300000, "description": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π —Å–∞–ª–æ–Ω, –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–¥–≤–µ—Å–∫–∞"},
            {"stamp_id": hyundai_stamp, "model_car_id": elantra_model, "run_km": 29000, "vin": "5NPDH4AE6FH123409", "status_id": available_status, "price": 1050000, "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω, –±–æ–≥–∞—Ç–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"},
            {"stamp_id": kia_stamp, "model_car_id": rio_model, "run_km": 23000, "vin": "KNAFU5A20E5123410", "status_id": available_status, "price": 890000, "description": "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Å–µ–¥–∞–Ω, –º–∞–ª—ã–π —Ä–∞—Å—Ö–æ–¥"},
            {"stamp_id": lexus_stamp, "model_car_id": rx_model, "run_km": 34000, "vin": "2T2ZZMCA5JC123411", "status_id": available_status, "price": 4200000, "description": "–ü—Ä–µ–º–∏—É–º –∫—Ä–æ—Å—Å–æ–≤–µ—Ä, —Ç–∏—Ö–∞—è —Ä–∞–±–æ—Ç–∞"},
            {"stamp_id": mazda_stamp, "model_car_id": cx5_model, "run_km": 41000, "vin": "JM3KFBDL0H0123412", "status_id": available_status, "price": 1850000, "description": "–°—Ç–∏–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω, –æ—Ç–ª–∏—á–Ω–∞—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å"},
            {"stamp_id": subaru_stamp, "model_car_id": outback_model, "run_km": 62000, "vin": "4S4BSANC1H3123413", "status_id": available_status, "price": 1950000, "description": "–ü–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥, —É–Ω–∏–≤–µ—Ä—Å–∞–ª –¥–ª—è –ª—é–±—ã—Ö –¥–æ—Ä–æ–≥"},
            
            # –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (5+ –∑–∞–ø–∏—Å–µ–π)
            {"stamp_id": volvo_stamp, "model_car_id": xc60_model, "run_km": 47000, "vin": "YV4A22PK5J1123414", "status_id": sold_status, "price": 2400000, "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç, –ø—Ä–æ–¥–∞–Ω 01.01.2024"},
            {"stamp_id": chevrolet_stamp, "model_car_id": cruze_model, "run_km": 58000, "vin": "1G1PE5SB3G7123415", "status_id": sold_status, "price": 850000, "description": "–ù–∞–¥–µ–∂–Ω—ã–π –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Å–µ–¥–∞–Ω, –ø—Ä–æ–¥–∞–Ω"},
            {"stamp_id": toyota_stamp, "model_car_id": corolla_model, "run_km": 25000, "vin": "2T1BURHE9JC123416", "status_id": sold_status, "price": 1150000, "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –ø—Ä–æ–¥–∞–Ω"},
            {"stamp_id": honda_stamp, "model_car_id": accord_model, "run_km": 36000, "vin": "1HGCR2F73HA123417", "status_id": sold_status, "price": 1650000, "description": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π —Å–µ–¥–∞–Ω –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞, –ø—Ä–æ–¥–∞–Ω"},
            {"stamp_id": bmw_stamp, "model_car_id": three_series_model, "run_km": 44000, "vin": "WBA8E9C58J8123418", "status_id": sold_status, "price": 2650000, "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å–µ–¥–∞–Ω, –∑–∞–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥, –ø—Ä–æ–¥–∞–Ω"}
        ]
        
        for car_data in cars_data:
            car, created = Cars.get_or_create(
                vin=car_data["vin"],
                defaults=car_data
            )
            
            if created:
                print(f"   ‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_data['stamp_id'].stamp} {car_data['model_car_id'].model_car} —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"   ‚ÑπÔ∏è  –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å VIN {car_data['vin']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç (10+ –∑–∞–ø–∏—Å–µ–π)
        print("\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1 = Users.get(Users.email == "user1@example.com")
        user2 = Users.get(Users.email == "user2@example.com")
        user3 = Users.get(Users.email == "user3@example.com")
        user4 = Users.get(Users.email == "user4@example.com")
        user5 = Users.get(Users.email == "user5@example.com")
        
        anketa_data = [
            {"user_id": user1, "stamp": "Toyota", "model_car": "Camry", "run": 65000, "price": 800000, "vin": "JTDBR32E160123501", "description": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞, –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º —Ö–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"},
            {"user_id": user2, "stamp": "Nissan", "model_car": "Altima", "run": 89000, "price": 950000, "vin": "1N4AL3AP6JC123502", "description": "–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –¢–û"},
            {"user_id": user3, "stamp": "Ford", "model_car": "Focus", "run": 72000, "price": 650000, "vin": "1FADP3F2XEL123503", "description": "–ì–æ—Ä–æ–¥—Å–∫–æ–π —Ö–µ—Ç—á–±–µ–∫, –Ω–µ –±–∏—Ç, –Ω–µ –∫—Ä–∞—à–µ–Ω"},
            {"user_id": user4, "stamp": "Honda", "model_car": "Civic", "run": 45000, "price": 1100000, "vin": "2HGFA16507H123504", "description": "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π, –º–∞–ª—ã–π —Ä–∞—Å—Ö–æ–¥, –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"},
            {"user_id": user5, "stamp": "BMW", "model_car": "3 Series", "run": 112000, "price": 1800000, "vin": "WBA8E9C58J8123505", "description": "–ù–µ–º–µ—Ü–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞"},
            {"user_id": user1, "stamp": "Volkswagen", "model_car": "Golf", "run": 58000, "price": 850000, "vin": "3VW467ATXHM123506", "description": "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω —Ö–æ–∑—è–∏–Ω"},
            {"user_id": user2, "stamp": "Audi", "model_car": "A4", "run": 67000, "price": 1900000, "vin": "WAUFFAFLXFN123507", "description": "–ü—Ä–µ–º–∏—É–º —Å–µ–¥–∞–Ω, –ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥"},
            {"user_id": user3, "stamp": "Mercedes-Benz", "model_car": "C-Class", "run": 49000, "price": 2200000, "vin": "WDDHF5EB7EA123508", "description": "–†–æ—Å–∫–æ—à–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —É—Ö–æ–∂–µ–Ω–Ω—ã–π"},
            {"user_id": user4, "stamp": "Hyundai", "model_car": "Elantra", "run": 31000, "price": 950000, "vin": "5NPDH4AE6FH123509", "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω, –º–∞–ª—ã–π –ø—Ä–æ–±–µ–≥"},
            {"user_id": user5, "stamp": "Kia", "model_car": "Rio", "run": 28000, "price": 750000, "vin": "KNAFU5A20E5123510", "description": "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π, –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞"},
            {"user_id": user1, "stamp": "Mazda", "model_car": "CX-5", "run": 53000, "price": 1650000, "vin": "JM3KFBDL0H0123511", "description": "–ö—Ä–æ—Å—Å–æ–≤–µ—Ä –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"}
        ]
        
        for anketa_item in anketa_data:
            anketa, created = Anketa.get_or_create(
                vin=anketa_item["vin"],
                defaults=anketa_item
            )
            
            if created:
                print(f"   ‚úÖ –ê–Ω–∫–µ—Ç–∞ –¥–ª—è {anketa_item['stamp']} {anketa_item['model_car']} —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print(f"   ‚ÑπÔ∏è  –ê–Ω–∫–µ—Ç–∞ —Å VIN {anketa_item['vin']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 9. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ (5+ –∑–∞–ø–∏—Å–µ–π)
        print("\n9. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–æ–∫
        sold_cars = Cars.select().where(Cars.status_id == sold_status).limit(5)
        buyers = Users.select().where(Users.email.contains('user')).limit(5)
        
        for i, (car, buyer) in enumerate(zip(sold_cars, buyers)):
            shopping, created = Shopping.get_or_create(
                car_id=car.id,
                buyer_id=buyer.id,
                defaults={
                    'price': car.price,
                    'date_buy': datetime.now() - timedelta(days=30+i*5)
                }
            )
            
            if created:
                print(f"   ‚úÖ –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car.stamp_id.stamp} {car.model_car_id.model_car} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {buyer.full_name}")
            else:
                print(f"   ‚ÑπÔ∏è  –ü–æ–∫—É–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 10. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ (5+ –∑–∞–ø–∏—Å–µ–π)
        print("\n10. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂...")
        
        admin = Users.get(Users.email == "limon@gmail.com")
        
        for i, car in enumerate(sold_cars):
            sale, created = Sales.get_or_create(
                car_id=car.id,
                buyer_id=admin.id,
                defaults={
                    'price': car.price - 100000,  # –ü—Ä–æ–¥–∞–∂–∞ –¥–µ—à–µ–≤–ª–µ –ø–æ–∫—É–ø–∫–∏
                    'date_sale': datetime.now() - timedelta(days=60+i*5)
                }
            )
            
            if created:
                print(f"   ‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car.stamp_id.stamp} {car.model_car_id.model_car}")
            else:
                print(f"   ‚ÑπÔ∏è  –ü—Ä–æ–¥–∞–∂–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print("\nüéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {Users.select().count()} –∑–∞–ø–∏—Å–µ–π")
        print(f"   üöó –ú–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {Stamp.select().count()} –∑–∞–ø–∏—Å–µ–π") 
        print(f"   üöô –ú–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {ModelCar.select().count()} –∑–∞–ø–∏—Å–µ–π")
        print(f"   üèéÔ∏è  –ê–≤—Ç–æ–º–æ–±–∏–ª–∏: {Cars.select().count()} –∑–∞–ø–∏—Å–µ–π")
        print(f"   üìù –ê–Ω–∫–µ—Ç—ã: {Anketa.select().count()} –∑–∞–ø–∏—Å–µ–π")
        print(f"   üí∞ –ü–æ–∫—É–ø–∫–∏: {Shopping.select().count()} –∑–∞–ø–∏—Å–µ–π")
        print(f"   üí∏ –ü—Ä–æ–¥–∞–∂–∏: {Sales.select().count()} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if not database_connection.is_closed():
            database_connection.close()

if __name__ == "__main__":
    seed_database()